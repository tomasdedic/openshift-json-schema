{
  "description": "ConfigurationPolicy is the schema for the configurationpolicies API. A configuration policy\ncontains, in whole or in part, an object definition to compare with objects on the cluster. If\nthe definition of the configuration policy doesn't match the objects on the cluster, a\nnoncompliant status is displayed. Furthermore, if the RemediationAction is set to `enforce` and\nthe name of the object is available, the configuration policy controller creates or updates the\nobject to match in order to make the configuration policy compliant.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "policy.open-cluster-management.io/v1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "ConfigurationPolicy"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "ConfigurationPolicySpec defines the desired configuration of objects on the cluster, along with\nhow the controller should handle when the cluster doesn't match the configuration policy.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "remediationAction"
      ],
      "properties": {
        "evaluationInterval": {
          "description": "EvaluationInterval configures the minimum elapsed time before a configuration policy is\nreevaluated. If the policy spec is changed, or if the list of namespaces selected by the policy\nchanges, the policy might be evaluated regardless of the settings here.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "compliant": {
              "description": "Compliant is the minimum elapsed time before a configuration policy is reevaluated when in the\ncompliant state. Set this to `never` to disable reevaluation when in the compliant state.",
              "type": [
                "string",
                "null"
              ],
              "pattern": "^(?:(?:(?:[0-9]+(?:.[0-9])?)(?:h|m|s|(?:ms)|(?:us)|(?:ns)))|never)+$"
            },
            "noncompliant": {
              "description": "NonCompliant is the minimum elapsed time before a configuration policy is reevaluated when in\nthe noncompliant state. Set this to `never` to disable reevaluation when in the noncompliant\nstate.",
              "type": [
                "string",
                "null"
              ],
              "pattern": "^(?:(?:(?:[0-9]+(?:.[0-9])?)(?:h|m|s|(?:ms)|(?:us)|(?:ns)))|never)+$"
            }
          },
          "additionalProperties": false
        },
        "namespaceSelector": {
          "description": "NamespaceSelector defines the list of namespaces to include or exclude for objects defined in\n`spec[\"object-templates\"]`. All selector rules are combined. If 'include' is not provided but\n`matchLabels` and/or `matchExpressions` are, `include` will behave as if `['*']` were given. If\n`matchExpressions` and `matchLabels` are both not provided, `include` must be provided to\nretrieve namespaces.",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "exclude": {
              "description": "Exclude is an array of filepath expressions to exclude objects by name.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ],
                "minLength": 1
              }
            },
            "include": {
              "description": "Include is an array of filepath expressions to include objects by name.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "type": [
                  "string",
                  "null"
                ],
                "minLength": 1
              }
            },
            "matchExpressions": {
              "description": "MatchExpressions is an array of label selector requirements matching objects by label.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                "type": [
                  "object",
                  "null"
                ],
                "required": [
                  "key",
                  "operator"
                ],
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "matchLabels": {
              "description": "MatchLabels is a map of {key,value} pairs matching objects by label.",
              "type": [
                "object",
                "null"
              ],
              "additionalProperties": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          "additionalProperties": false
        },
        "object-templates": {
          "description": "The `object-templates` is an array of object configurations for the configuration policy to\ncheck, create, modify, or delete objects on the cluster. Keys inside of the objectDefinition in\nan object template may point to values that have Go templates. For more advanced Go templating\nsuch as `range` loops and `if` conditionals, use `object-templates-raw`. Only one of\n`object-templates` and `object-templates-raw` can be set in a configuration policy. For more on\nthe Go templates, see https://github.com/stolostron/go-template-utils/blob/main/README.md.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "ObjectTemplate describes the desired state of an object on the cluster.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "complianceType",
              "objectDefinition"
            ],
            "properties": {
              "complianceType": {
                "description": "ComplianceType describes how objects on the cluster should be compared with the object definition\nof the configuration policy. The supported options are `MustHave`, `MustOnlyHave`, or\n`MustNotHave`.",
                "type": "string",
                "enum": [
                  "MustHave",
                  "Musthave",
                  "musthave",
                  "MustOnlyHave",
                  "Mustonlyhave",
                  "mustonlyhave",
                  "MustNotHave",
                  "Mustnothave",
                  "mustnothave"
                ]
              },
              "metadataComplianceType": {
                "description": "MetadataComplianceType describes how the labels and annotations of objects on the cluster should\nbe compared with the object definition of the configuration policy. The supported options are\n`MustHave` or `MustOnlyHave`. The default value is the value defined in `complianceType` for the\nobject template.",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "MustHave",
                  "Musthave",
                  "musthave",
                  "MustOnlyHave",
                  "Mustonlyhave",
                  "mustonlyhave"
                ]
              },
              "objectDefinition": {
                "description": "ObjectDefinition defines required fields to be compared with objects on the cluster.",
                "x-kubernetes-preserve-unknown-fields": true
              },
              "recordDiff": {
                "description": "RecordDiff specifies whether and where to log the difference between the object on the cluster\nand the `objectDefinition` parameter in the policy. The supported options are `InStatus` to\nrecord the difference in the policy status field, `Log` to log the difference in the\n`config-policy-controller` pod, and `None` to not log the difference. The default value is\n`None` for object kinds that include sensitive data such as `ConfigMap`, `OAuthAccessToken`,\n`OAuthAuthorizeTokens`, `Route`, and `Secret`, or when a templated `objectDefinition`\nreferences sensitive data. For all other kinds, the default value is `InStatus`.",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "Log",
                  "InStatus",
                  "None"
                ]
              },
              "recreateOption": {
                "description": "RecreateOption describes when to delete and recreate an object when an update is required. When you set the\nobject to `IfRequired`, the policy recreates the object when updating an immutable field. When you set the\nparameter to `Always`, the policy recreates the object on any update. When you set the `remediationAction` to\n`inform`, the parameter value, `recreateOption`, has no effect on the object. The `IfRequired` value has no\neffect on clusters without dry-run update support. The default value is `None`.",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "None",
                  "IfRequired",
                  "Always"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "object-templates-raw": {
          "description": "The `object-templates-raw` is a string containing Go templates that must ultimately produce an\narray of object configurations in YAML format to be used as `object-templates`. Only one of\n`object-templates` and `object-templates-raw` can be set in a configuration policy. For more on\nthe Go templates, see https://github.com/stolostron/go-template-utils/blob/main/README.md.",
          "type": [
            "string",
            "null"
          ]
        },
        "pruneObjectBehavior": {
          "description": "PruneObjectBehavior is used to remove objects that are managed by the policy upon either case: a\nchange to the policy that causes an object to no longer be managed by the policy, or the deletion\nof the policy.",
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "DeleteAll",
            "DeleteIfCreated",
            "None"
          ]
        },
        "remediationAction": {
          "description": "RemediationAction is the remediation of the policy. The parameter values are `enforce` and\n`inform`.",
          "type": "string",
          "enum": [
            "Inform",
            "inform",
            "Enforce",
            "enforce"
          ]
        },
        "severity": {
          "description": "Severity is a user-defined severity for when an object is noncompliant with this configuration\npolicy. The supported options are `low`, `medium`, `high`, and `critical`.",
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "low",
            "Low",
            "medium",
            "Medium",
            "high",
            "High",
            "critical",
            "Critical"
          ]
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "ConfigurationPolicyStatus is the observed status of the configuration policy from its object\ndefinitions.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "compliancyDetails": {
          "description": "CompliancyDetails is a list of statuses matching one-to-one with each of the items in the\n`object-templates` array.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "TemplateStatus reports the compliance details from the definitions in an `object-template`.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "Compliant": {
                "description": "ComplianceState reports the observed status from the definitions of the policy.",
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "Compliant",
                  "Pending",
                  "NonCompliant",
                  "Terminating"
                ]
              },
              "Validity": {
                "description": "Deprecated",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "reason": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "valid": {
                    "type": [
                      "boolean",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "conditions": {
                "description": "Conditions contains the details from the latest evaluation of the `object-template`.",
                "type": [
                  "array",
                  "null"
                ],
                "items": {
                  "description": "Condition contains the details of an evaluation of an `object-template`.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "type"
                  ],
                  "properties": {
                    "lastTransitionTime": {
                      "description": "LastTransitionTime is the most recent time the condition transitioned to the current condition.",
                      "type": [
                        "string",
                        "null"
                      ],
                      "format": "date-time"
                    },
                    "message": {
                      "description": "Message is a human-readable message indicating details about the condition.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "reason": {
                      "description": "Reason is a brief summary for the condition.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "status": {
                      "description": "Status is an unused field. If set, it's set to `True`.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "type": {
                      "description": "Type is the type of condition. The supported options are `violation` or `notification`.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                }
              }
            },
            "additionalProperties": false
          }
        },
        "compliant": {
          "description": "ComplianceState reports the observed status from the definitions of the policy.",
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "Compliant",
            "Pending",
            "NonCompliant",
            "Terminating"
          ]
        },
        "lastEvaluated": {
          "description": "LastEvaluated is an ISO-8601 timestamp of the last time the policy was evaluated.",
          "type": [
            "string",
            "null"
          ]
        },
        "lastEvaluatedGeneration": {
          "description": "LastEvaluatedGeneration is the generation of the ConfigurationPolicy object when it was last\nevaluated.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int64"
        },
        "relatedObjects": {
          "description": "RelatedObjects is a list of objects processed by the configuration policy due to its\n`object-templates`.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "RelatedObject contains the details of an object matched by the policy.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "compliant": {
                "description": "Compliant represents whether the related object is compliant with the definition of the policy.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "object": {
                "description": "ObjectResource contains the identifying fields of the related object.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "apiVersion": {
                    "description": "API version of the related object.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "kind": {
                    "description": "Kind of the related object.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "metadata": {
                    "description": "ObjectMetadata contains the metadata for an object matched by the configuration policy.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name of the related object.",
                        "type": [
                          "string",
                          "null"
                        ]
                      },
                      "namespace": {
                        "description": "Namespace of the related object.",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "properties": {
                "description": "Properties are additional properties of the related object relevant to the configuration policy.",
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "createdByPolicy": {
                    "description": "CreatedByPolicy reports whether the object was created by the configuration policy, which is\nimportant when pruning is configured.",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "diff": {
                    "description": "Diff stores the difference between the `objectDefinition` in the policy and the object on the\ncluster.",
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "uid": {
                    "description": "UID stores the object UID to help track object ownership for deletion when pruning is\nconfigured.",
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "additionalProperties": false
              },
              "reason": {
                "description": "Reason is a human-readable message of why the related object has a particular compliance.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "additionalProperties": false
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "policy.open-cluster-management.io",
      "kind": "ConfigurationPolicy",
      "version": "v1"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}