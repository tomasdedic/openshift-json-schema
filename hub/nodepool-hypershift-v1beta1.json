{
  "description": "NodePool is a scalable set of worker nodes attached to a HostedCluster.\nNodePool machine architectures are uniform within a given pool, and are\nindependent of the control plane\u2019s underlying machine architecture.",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "hypershift.openshift.io/v1beta1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "NodePool"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "Spec is the desired behavior of the NodePool.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "clusterName",
        "management",
        "platform",
        "release"
      ],
      "properties": {
        "arch": {
          "description": "Arch is the preferred processor architecture for the NodePool (currently only supported on AWS)\nNOTE: This is set as optional to prevent validation from failing due to a limitation on client side validation with open API machinery:\n\thttps://github.com/kubernetes/kubernetes/issues/108768#issuecomment-1253912215\nTODO Add s390x to enum validation once the architecture is supported",
          "type": [
            "string",
            "null"
          ],
          "enum": [
            "arm64",
            "amd64",
            "ppc64le"
          ],
          "x-kubernetes-validations": [
            {
              "message": "Arch is immutable",
              "rule": "self == oldSelf"
            }
          ]
        },
        "autoScaling": {
          "description": "Autoscaling specifies auto-scaling behavior for the NodePool.",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "max",
            "min"
          ],
          "properties": {
            "max": {
              "description": "Max is the maximum number of nodes allowed in the pool. Must be >= 1.",
              "type": "integer",
              "format": "int32",
              "minimum": 1
            },
            "min": {
              "description": "Min is the minimum number of nodes to maintain in the pool. Must be >= 1.",
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          "x-kubernetes-validations": [
            {
              "message": "max must be equal or greater than min",
              "rule": "self.max >= self.min"
            }
          ],
          "additionalProperties": false
        },
        "clusterName": {
          "description": "ClusterName is the name of the HostedCluster this NodePool belongs to.\n\n\nTODO(dan): Should this be a LocalObjectReference?",
          "type": "string",
          "x-kubernetes-validations": [
            {
              "message": "ClusterName is immutable",
              "rule": "self == oldSelf"
            }
          ]
        },
        "config": {
          "description": "Config is a list of references to ConfigMaps containing serialized\nMachineConfig resources to be injected into the ignition configurations of\nnodes in the NodePool. The MachineConfig API schema is defined here:\n\n\nhttps://github.com/openshift/machine-config-operator/blob/18963e4f8fe66e8c513ca4b131620760a414997f/pkg/apis/machineconfiguration.openshift.io/v1/types.go#L185\n\n\nEach ConfigMap must have a single key named \"config\" whose value is the YML\nwith one or more serialized machineconfiguration.openshift.io resources:\nKubeletConfig\nContainerRuntimeConfig\nMachineConfig\nClusterImagePolicy\nImageContentSourcePolicy\nor\nImageDigestMirrorSet",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "name": {
                "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
          }
        },
        "management": {
          "description": "Management specifies behavior for managing nodes in the pool, such as\nupgrade strategies and auto-repair behaviors.",
          "type": "object",
          "required": [
            "upgradeType"
          ],
          "properties": {
            "autoRepair": {
              "description": "AutoRepair specifies whether health checks should be enabled for machines\nin the NodePool. The default is false.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "inPlace": {
              "description": "InPlace is the configuration for in-place upgrades.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "maxUnavailable": {
                  "description": "MaxUnavailable is the maximum number of nodes that can be unavailable\nduring the update.\n\n\nValue can be an absolute number (ex: 5) or a percentage of desired nodes\n(ex: 10%).\n\n\nAbsolute number is calculated from percentage by rounding down.\n\n\nDefaults to 1.\n\n\nExample: when this is set to 30%, a max of 30% of the nodes can be made\nunschedulable/unavailable immediately when the update starts. Once a set\nof nodes is updated, more nodes can be made unschedulable for update,\nensuring that the total number of nodes schedulable at all times during\nthe update is at least 70% of desired nodes.",
                  "x-kubernetes-int-or-string": true
                }
              },
              "additionalProperties": false
            },
            "replace": {
              "description": "Replace is the configuration for rolling upgrades.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "rollingUpdate": {
                  "description": "RollingUpdate specifies a rolling update strategy which upgrades nodes by\ncreating new nodes and deleting the old ones.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "maxSurge": {
                      "description": "MaxSurge is the maximum number of nodes that can be provisioned above the\ndesired number of nodes.\n\n\nValue can be an absolute number (ex: 5) or a percentage of desired nodes\n(ex: 10%).\n\n\nAbsolute number is calculated from percentage by rounding up.\n\n\nThis can not be 0 if MaxUnavailable is 0.\n\n\nDefaults to 1.\n\n\nExample: when this is set to 30%, new nodes can be provisioned immediately\nwhen the rolling update starts, such that the total number of old and new\nnodes do not exceed 130% of desired nodes. Once old nodes have been\ndeleted, new nodes can be provisioned, ensuring that total number of nodes\nrunning at any time during the update is at most 130% of desired nodes.",
                      "x-kubernetes-int-or-string": true
                    },
                    "maxUnavailable": {
                      "description": "MaxUnavailable is the maximum number of nodes that can be unavailable\nduring the update.\n\n\nValue can be an absolute number (ex: 5) or a percentage of desired nodes\n(ex: 10%).\n\n\nAbsolute number is calculated from percentage by rounding down.\n\n\nThis can not be 0 if MaxSurge is 0.\n\n\nDefaults to 0.\n\n\nExample: when this is set to 30%, old nodes can be deleted down to 70% of\ndesired nodes immediately when the rolling update starts. Once new nodes\nare ready, more old nodes be deleted, followed by provisioning new nodes,\nensuring that the total number of nodes available at all times during the\nupdate is at least 70% of desired nodes.",
                      "x-kubernetes-int-or-string": true
                    }
                  },
                  "additionalProperties": false
                },
                "strategy": {
                  "description": "Strategy is the node replacement strategy for nodes in the pool.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "RollingUpdate",
                    "OnDelete"
                  ]
                }
              },
              "additionalProperties": false
            },
            "upgradeType": {
              "description": "UpgradeType specifies the type of strategy for handling upgrades.",
              "type": "string",
              "enum": [
                "Replace",
                "InPlace"
              ],
              "x-kubernetes-validations": [
                {
                  "message": "UpgradeType is immutable",
                  "rule": "self == oldSelf"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "nodeDrainTimeout": {
          "description": "NodeDrainTimeout is the total amount of time that the controller will spend on draining a node.\nThe default value is 0, meaning that the node can be drained without any time limitations.\nNOTE: NodeDrainTimeout is different from `kubectl drain --timeout`\nTODO (alberto): Today changing this field will trigger a recreate rolling update, which kind of defeats\nthe purpose of the change. In future we plan to propagate this field in-place.\nhttps://github.com/kubernetes-sigs/cluster-api/issues/5880",
          "type": [
            "string",
            "null"
          ]
        },
        "nodeLabels": {
          "description": "NodeLabels propagates a list of labels to Nodes, only once on creation.\nValid values are those in https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set",
          "type": [
            "object",
            "null"
          ],
          "additionalProperties": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "pausedUntil": {
          "description": "PausedUntil is a field that can be used to pause reconciliation on a resource.\nEither a date can be provided in RFC3339 format or a boolean. If a date is\nprovided: reconciliation is paused on the resource until that date. If the boolean true is\nprovided: reconciliation is paused on the resource until the field is removed.",
          "type": [
            "string",
            "null"
          ]
        },
        "platform": {
          "description": "Platform specifies the underlying infrastructure provider for the NodePool\nand is used to configure platform specific behavior.",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "agent": {
              "description": "Agent specifies the configuration used when using Agent platform.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "agentLabelSelector": {
                  "description": "AgentLabelSelector contains labels that must be set on an Agent in order to\nbe selected for a Machine.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "matchExpressions": {
                      "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "key",
                          "operator"
                        ],
                        "properties": {
                          "key": {
                            "description": "key is the label key that the selector applies to.",
                            "type": "string"
                          },
                          "operator": {
                            "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                            "type": "string"
                          },
                          "values": {
                            "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                            "type": [
                              "array",
                              "null"
                            ],
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "matchLabels": {
                      "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "additionalProperties": {
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    }
                  },
                  "x-kubernetes-map-type": "atomic",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "aws": {
              "description": "AWS specifies the configuration used when operating on AWS.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "instanceType",
                "subnet"
              ],
              "properties": {
                "ami": {
                  "description": "AMI is the image id to use for node instances. If unspecified, the default\nis chosen based on the NodePool release payload image.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "instanceProfile": {
                  "description": "InstanceProfile is the AWS EC2 instance profile, which is a container for an IAM role that the EC2 instance uses.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "instanceType": {
                  "description": "InstanceType is an ec2 instance type for node instances (e.g. m5.large).",
                  "type": "string"
                },
                "resourceTags": {
                  "description": "ResourceTags is an optional list of additional tags to apply to AWS node\ninstances.\n\n\nThese will be merged with HostedCluster scoped tags, and HostedCluster tags\ntake precedence in case of conflicts.\n\n\nSee https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html for\ninformation on tagging AWS resources. AWS supports a maximum of 50 tags per\nresource. OpenShift reserves 25 tags for its use, leaving 25 tags available\nfor the user.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "maxItems": 25,
                  "items": {
                    "description": "AWSResourceTag is a tag to apply to AWS resources created for the cluster.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "key",
                      "value"
                    ],
                    "properties": {
                      "key": {
                        "description": "Key is the key of the tag.",
                        "type": "string",
                        "maxLength": 128,
                        "minLength": 1,
                        "pattern": "^[0-9A-Za-z_.:/=+-@]+$"
                      },
                      "value": {
                        "description": "Value is the value of the tag.\n\n\nSome AWS service do not support empty values. Since tags are added to\nresources in many services, the length of the tag value must meet the\nrequirements of all services.",
                        "type": "string",
                        "maxLength": 256,
                        "minLength": 1,
                        "pattern": "^[0-9A-Za-z_.:/=+-@]+$"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "rootVolume": {
                  "description": "RootVolume specifies configuration for the root volume of node instances.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "size",
                    "type"
                  ],
                  "properties": {
                    "encrypted": {
                      "description": "Encrypted is whether the volume should be encrypted or not.",
                      "type": [
                        "boolean",
                        "null"
                      ],
                      "x-kubernetes-validations": [
                        {
                          "message": "Encrypted is immutable",
                          "rule": "self == oldSelf"
                        }
                      ]
                    },
                    "encryptionKey": {
                      "description": "EncryptionKey is the KMS key to use to encrypt the volume. Can be either a KMS key ID or ARN.\nIf Encrypted is set and this is omitted, the default AWS key will be used.\nThe key must already exist and be accessible by the controller.",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "iops": {
                      "description": "IOPS is the number of IOPS requested for the disk. This is only valid\nfor type io1.",
                      "type": [
                        "integer",
                        "null"
                      ],
                      "format": "int64"
                    },
                    "size": {
                      "description": "Size specifies size (in Gi) of the storage device.\n\n\nMust be greater than the image snapshot size or 8 (whichever is greater).",
                      "type": "integer",
                      "format": "int64",
                      "minimum": 8
                    },
                    "type": {
                      "description": "Type is the type of the volume.",
                      "type": "string"
                    }
                  },
                  "additionalProperties": false
                },
                "securityGroups": {
                  "description": "SecurityGroups is an optional set of security groups to associate with node\ninstances.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "AWSResourceReference is a reference to a specific AWS resource by ID or filters.\nOnly one of ID or Filters may be specified. Specifying more than one will result in\na validation error.",
                    "type": [
                      "object",
                      "null"
                    ],
                    "properties": {
                      "filters": {
                        "description": "Filters is a set of key/value pairs used to identify a resource\nThey are applied according to the rules defined by the AWS API:\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Filtering.html",
                        "type": [
                          "array",
                          "null"
                        ],
                        "items": {
                          "description": "Filter is a filter used to identify an AWS resource",
                          "type": [
                            "object",
                            "null"
                          ],
                          "required": [
                            "name",
                            "values"
                          ],
                          "properties": {
                            "name": {
                              "description": "Name of the filter. Filter names are case-sensitive.",
                              "type": "string"
                            },
                            "values": {
                              "description": "Values includes one or more filter values. Filter values are case-sensitive.",
                              "type": "array",
                              "items": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              }
                            }
                          },
                          "additionalProperties": false
                        }
                      },
                      "id": {
                        "description": "ID of resource",
                        "type": [
                          "string",
                          "null"
                        ]
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "subnet": {
                  "description": "Subnet is the subnet to use for node instances.",
                  "type": "object",
                  "properties": {
                    "filters": {
                      "description": "Filters is a set of key/value pairs used to identify a resource\nThey are applied according to the rules defined by the AWS API:\nhttps://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Filtering.html",
                      "type": [
                        "array",
                        "null"
                      ],
                      "items": {
                        "description": "Filter is a filter used to identify an AWS resource",
                        "type": [
                          "object",
                          "null"
                        ],
                        "required": [
                          "name",
                          "values"
                        ],
                        "properties": {
                          "name": {
                            "description": "Name of the filter. Filter names are case-sensitive.",
                            "type": "string"
                          },
                          "values": {
                            "description": "Values includes one or more filter values. Filter values are case-sensitive.",
                            "type": "array",
                            "items": {
                              "type": [
                                "string",
                                "null"
                              ]
                            }
                          }
                        },
                        "additionalProperties": false
                      }
                    },
                    "id": {
                      "description": "ID of resource",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "x-kubernetes-validations": [
                    {
                      "message": "subnet is invalid, a valid subnet id or filters must be set, but not both",
                      "rule": "has(self.id) && self.id.startsWith('subnet-') ? !has(self.filters) : size(self.filters) > 0"
                    }
                  ],
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "azure": {
              "type": [
                "object",
                "null"
              ],
              "required": [
                "subnetID",
                "vmsize"
              ],
              "properties": {
                "availabilityZone": {
                  "description": "AvailabilityZone is the failure domain identifier where the VM should be attached to. This must not be specified\nfor clusters in a location that does not support AvailabilityZone.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "diskEncryptionSetID": {
                  "description": "DiskEncryptionSetID is the ID of the DiskEncryptionSet resource to use to encrypt the OS disks for the VMs. This\nneeds to exist in the same subscription id listed in the Hosted Cluster, hcluster.Spec.Platform.Azure.SubscriptionID.\nDiskEncryptionSetID should also exist in a resource group under the same subscription id and the same location\nlisted in the Hosted Cluster, hcluster.Spec.Platform.Azure.Location.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "diskSizeGB": {
                  "description": "DiskSizeGB is the size in GB to assign to the OS disk\nCAPZ default is 30GB, https://github.com/kubernetes-sigs/cluster-api-provider-azure/blob/b3708019a67ff19407b87d63c402af94ca4246f6/api/v1beta1/types.go#L599",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32",
                  "minimum": 16
                },
                "diskStorageAccountType": {
                  "description": "DiskStorageAccountType is the disk storage account type to use. Valid values are:\n* Standard_LRS: HDD\n* StandardSSD_LRS: Standard SSD\n* Premium_LRS: Premium SDD\n* UltraSSD_LRS: Ultra SDD\n\n\nDefaults to Premium_LRS. For more details, visit the Azure documentation:\nhttps://docs.microsoft.com/en-us/azure/virtual-machines/disks-types#disk-type-comparison",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "Standard_LRS",
                    "StandardSSD_LRS",
                    "Premium_LRS",
                    "UltraSSD_LRS"
                  ]
                },
                "enableEphemeralOSDisk": {
                  "description": "EnableEphemeralOSDisk is a flag when set to true, will enable ephemeral OS disk.",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "imageID": {
                  "description": "ImageID is the id of the image to boot from. If unset, the default image at the location below will be used and\nis expected to exist: subscription/<subscriptionID>/resourceGroups/<resourceGroupName>/providers/Microsoft.Compute/images/rhcos.x86_64.vhd.\nThe <subscriptionID> and the <resourceGroupName> are expected to be the same resource group documented in the\nHosted Cluster specification respectively, hcluster.Spec.Platform.Azure.SubscriptionID and\nhcluster.Spec.Platform.Azure.ResourceGroupName.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "subnetID": {
                  "description": "SubnetID is the subnet ID of an existing subnet where the nodes in the nodepool will be created. This can be a\ndifferent subnet than the one listed in the HostedCluster, hcluster.Spec.Platform.Azure.SubnetID, but must exist\nin the same hcluster.Spec.Platform.Azure.VnetID and must exist under the same subscription ID,\nhcluster.Spec.Platform.Azure.SubscriptionID.",
                  "type": "string",
                  "x-kubernetes-validations": [
                    {
                      "message": "SubnetID is immutable",
                      "rule": "self == oldSelf"
                    }
                  ]
                },
                "vmsize": {
                  "description": "VMSize is the Azure VM instance type to use for the nodes being created in the nodepool.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "ibmcloud": {
              "description": "IBMCloud defines IBMCloud specific settings for components",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "providerType": {
                  "description": "ProviderType is a specific supported infrastructure provider within IBM Cloud.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            },
            "kubevirt": {
              "description": "Kubevirt specifies the configuration used when operating on KubeVirt platform.",
              "type": [
                "object",
                "null"
              ],
              "required": [
                "rootVolume"
              ],
              "properties": {
                "additionalNetworks": {
                  "description": "AdditionalNetworks specify the extra networks attached to the nodes",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "description": "KubevirtNetwork specifies the configuration for a virtual machine\nnetwork interface",
                    "type": [
                      "object",
                      "null"
                    ],
                    "required": [
                      "name"
                    ],
                    "properties": {
                      "name": {
                        "description": "Name specify the network attached to the nodes\nit is a value with the format \"[namespace]/[name]\" to reference the\nmultus network attachment definition",
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "attachDefaultNetwork": {
                  "description": "AttachDefaultNetwork specify if the default pod network should be attached to the nodes\nthis can only be set to false if AdditionalNetworks are configured",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "compute": {
                  "description": "Compute contains values representing the virtual hardware requested for the VM",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "cores": {
                      "description": "Cores represents how many cores the guest VM should have",
                      "type": [
                        "integer",
                        "null"
                      ],
                      "format": "int32"
                    },
                    "memory": {
                      "description": "Memory represents how much guest memory the VM should have",
                      "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                      "x-kubernetes-int-or-string": true
                    },
                    "qosClass": {
                      "description": "QosClass If set to \"Guaranteed\", requests the scheduler to place the VirtualMachineInstance on a node with\nlimit memory and CPU, equal to be the requested values, to set the VMI as a Guaranteed QoS Class;\nSee here for more details:\nhttps://kubevirt.io/user-guide/operations/node_overcommit/#requesting-the-right-qos-class-for-virtualmachineinstances",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "Burstable",
                        "Guaranteed"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "networkInterfaceMultiqueue": {
                  "description": "NetworkInterfaceMultiQueue If set to \"Enable\", virtual network interfaces configured with a virtio bus will also\nenable the vhost multiqueue feature for network devices. The number of queues created depends on additional\nfactors of the VirtualMachineInstance, like the number of guest CPUs.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "Enable",
                    "Disable"
                  ]
                },
                "nodeSelector": {
                  "description": "NodeSelector is a selector which must be true for the kubevirt VirtualMachine to fit on a node.\nSelector which must match a node's labels for the VM to be scheduled on that node. More info:\nhttps://kubernetes.io/docs/concepts/configuration/assign-pod-node/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                },
                "rootVolume": {
                  "description": "RootVolume represents values associated with the VM volume that will host rhcos",
                  "type": "object",
                  "properties": {
                    "cacheStrategy": {
                      "description": "CacheStrategy defines the boot image caching strategy. Default - no caching",
                      "type": [
                        "object",
                        "null"
                      ],
                      "required": [
                        "type"
                      ],
                      "properties": {
                        "type": {
                          "description": "Type is the type of the caching strategy",
                          "type": "string",
                          "enum": [
                            "None",
                            "PVC"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "diskImage": {
                      "description": "Image represents what rhcos image to use for the node pool",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "containerDiskImage": {
                          "description": "ContainerDiskImage is a string representing the container image that holds the root disk",
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "persistent": {
                      "description": "Persistent volume type means the VM's storage is backed by a PVC\nVMs that use persistent volumes can survive disruption events like restart and eviction\nThis is the default type used when no storage type is defined.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "accessModes": {
                          "description": "AccessModes is an array that contains the desired Access Modes the root volume should have.\nMore info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes",
                          "type": [
                            "array",
                            "null"
                          ],
                          "items": {
                            "type": [
                              "string",
                              "null"
                            ],
                            "enum": [
                              "ReadWriteOnce",
                              "ReadWriteMany",
                              "ReadOnly",
                              "ReadWriteOncePod"
                            ]
                          }
                        },
                        "size": {
                          "description": "Size is the size of the persistent storage volume",
                          "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                          "x-kubernetes-int-or-string": true
                        },
                        "storageClass": {
                          "description": "StorageClass is the storageClass used for the underlying PVC that hosts the volume",
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "volumeMode": {
                          "description": "VolumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.",
                          "type": [
                            "string",
                            "null"
                          ],
                          "enum": [
                            "Filesystem",
                            "Block"
                          ]
                        }
                      },
                      "additionalProperties": false
                    },
                    "type": {
                      "description": "Type represents the type of storage to associate with the kubevirt VMs.",
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "Persistent"
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "powervs": {
              "description": "PowerVS specifies the configuration used when using IBMCloud PowerVS platform.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "image": {
                  "description": "Image used for deploying the nodes. If unspecified, the default\nis chosen based on the NodePool release payload image.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "id": {
                      "description": "ID of resource",
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "name": {
                      "description": "Name of resource",
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  },
                  "additionalProperties": false
                },
                "imageDeletePolicy": {
                  "description": "ImageDeletePolicy is policy for the image deletion.\n\n\ndelete: delete the image from the infrastructure.\nretain: delete the image from the openshift but retain in the infrastructure.\n\n\nThe default is delete",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "delete",
                    "retain"
                  ]
                },
                "memoryGiB": {
                  "description": "MemoryGiB is the size of a virtual machine's memory, in GiB.\nmaximum value for the MemoryGiB depends on the selected SystemType.\nwhen SystemType is set to e880 maximum MemoryGiB value is 7463 GiB.\nwhen SystemType is set to e980 maximum MemoryGiB value is 15307 GiB.\nwhen SystemType is set to s922 maximum MemoryGiB value is 942 GiB.\nThe minimum memory is 32 GiB.\n\n\nWhen omitted, this means the user has no opinion and the platform is left to choose a reasonable\ndefault. The current default is 32.",
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "int32"
                },
                "processorType": {
                  "description": "ProcessorType is the VM instance processor type.\nIt must be set to one of the following values: Dedicated, Capped or Shared.\n\n\nDedicated: resources are allocated for a specific client, The hypervisor makes a 1:1 binding of a partition\u2019s processor to a physical processor core.\nShared: Shared among other clients.\nCapped: Shared, but resources do not expand beyond those that are requested, the amount of CPU time is Capped to the value specified for the entitlement.\n\n\nif the processorType is selected as Dedicated, then Processors value cannot be fractional.\nWhen omitted, this means that the user has no opinion and the platform is left to choose a\nreasonable default. The current default is shared.",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "dedicated",
                    "shared",
                    "capped"
                  ]
                },
                "processors": {
                  "description": "Processors is the number of virtual processors in a virtual machine.\nwhen the processorType is selected as Dedicated the processors value cannot be fractional.\nmaximum value for the Processors depends on the selected SystemType.\nwhen SystemType is set to e880 or e980 maximum Processors value is 143.\nwhen SystemType is set to s922 maximum Processors value is 15.\nminimum value for Processors depends on the selected ProcessorType.\nwhen ProcessorType is set as Shared or Capped, The minimum processors is 0.5.\nwhen ProcessorType is set as Dedicated, The minimum processors is 1.\nWhen omitted, this means that the user has no opinion and the platform is left to choose a\nreasonable default. The default is set based on the selected ProcessorType.\nwhen ProcessorType selected as Dedicated, the default is set to 1.\nwhen ProcessorType selected as Shared or Capped, the default is set to 0.5.",
                  "x-kubernetes-int-or-string": true
                },
                "storageType": {
                  "description": "StorageType for the image and nodes, this will be ignored if Image is specified.\nThe storage tiers in PowerVS are based on I/O operations per second (IOPS).\nIt means that the performance of your storage volumes is limited to the maximum number of IOPS based on volume size and storage tier.\nAlthough, the exact numbers might change over time, the Tier 3 storage is currently set to 3 IOPS/GB, and the Tier 1 storage is currently set to 10 IOPS/GB.\n\n\nThe default is tier1",
                  "type": [
                    "string",
                    "null"
                  ],
                  "enum": [
                    "tier1",
                    "tier3"
                  ]
                },
                "systemType": {
                  "description": "SystemType is the System type used to host the instance.\nsystemType determines the number of cores and memory that is available.\nFew of the supported SystemTypes are s922,e880,e980.\ne880 systemType available only in Dallas Datacenters.\ne980 systemType available in Datacenters except Dallas and Washington.\nWhen omitted, this means that the user has no opinion and the platform is left to choose a\nreasonable default. The current default is s922 which is generally available.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "additionalProperties": false
            },
            "type": {
              "description": "Type specifies the platform name.",
              "type": "string",
              "enum": [
                "AWS",
                "None",
                "IBMCloud",
                "Agent",
                "KubeVirt",
                "Azure",
                "PowerVS"
              ],
              "x-kubernetes-validations": [
                {
                  "message": "Type is immutable",
                  "rule": "self == oldSelf"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "release": {
          "description": "Release specifies the OCP release used for the NodePool. This informs the\nignition configuration for machines, as well as other platform specific\nmachine properties (e.g. an AMI on the AWS platform).",
          "type": "object",
          "required": [
            "image"
          ],
          "properties": {
            "image": {
              "description": "Image is the image pullspec of an OCP release payload image.",
              "type": "string",
              "pattern": "^(\\w+\\S+)$"
            }
          },
          "additionalProperties": false
        },
        "replicas": {
          "description": "Replicas is the desired number of nodes the pool should maintain. If\nunset, the default value is 0.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "taints": {
          "description": "Taints if specified, propagates a list of taints to Nodes, only once on creation.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "Taint is as v1 Core but without TimeAdded.\nhttps://github.com/kubernetes/kubernetes/blob/ed8cad1e80d096257921908a52ac69cf1f41a098/staging/src/k8s.io/api/core/v1/types.go#L3037-L3053",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "effect",
              "key"
            ],
            "properties": {
              "effect": {
                "description": "Required. The effect of the taint on pods\nthat do not tolerate the taint.\nValid effects are NoSchedule, PreferNoSchedule and NoExecute.",
                "type": "string"
              },
              "key": {
                "description": "Required. The taint key to be applied to a node.",
                "type": "string"
              },
              "value": {
                "description": "The taint value corresponding to the taint key.",
                "type": [
                  "string",
                  "null"
                ],
                "pattern": "^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$"
              }
            },
            "additionalProperties": false
          }
        },
        "tuningConfig": {
          "description": "TuningConfig is a list of references to ConfigMaps containing serialized\nTuned or PerformanceProfile resources to define the tuning configuration to be applied to\nnodes in the NodePool. The Tuned API is defined here:\n\n\nhttps://github.com/openshift/cluster-node-tuning-operator/blob/2c76314fb3cc8f12aef4a0dcd67ddc3677d5b54f/pkg/apis/tuned/v1/tuned_types.go\n\n\nThe PerformanceProfile API is defined here:\nhttps://github.com/openshift/cluster-node-tuning-operator/tree/b41042d42d4ba5bb2e99960248cf1d6ae4935018/pkg/apis/performanceprofile/v2\n\n\nEach ConfigMap must have a single key named \"tuning\" whose value is the\nJSON or YAML of a serialized Tuned or PerformanceProfile.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "LocalObjectReference contains enough information to let you locate the\nreferenced object inside the same namespace.",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "name": {
                "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names\nTODO: Add other useful fields. apiVersion, kind, uid?",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
          }
        }
      },
      "x-kubernetes-validations": [
        {
          "message": "Arch is required once set",
          "rule": "!has(oldSelf.arch) || has(self.arch)"
        },
        {
          "message": "Setting Arch to arm64 is only supported for AWS",
          "rule": "self.arch != 'arm64' || has(self.platform.aws)"
        },
        {
          "message": "Both replicas or autoScaling should not be set",
          "rule": "!has(self.replicas) || !has(self.autoScaling)"
        }
      ],
      "additionalProperties": false
    },
    "status": {
      "description": "Status is the latest observed status of the NodePool.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions represents the latest available observations of the node pool's\ncurrent state.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "We define our own condition type since metav1.Condition has validation\nfor Reason that might be broken by what we bubble up from CAPI.\nNodePoolCondition defines an observation of NodePool resource operational state.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "lastTransitionTime",
              "status",
              "type"
            ],
            "properties": {
              "lastTransitionTime": {
                "description": "Last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed. If that is not known, then using the time when\nthe API field changed is acceptable.",
                "type": "string",
                "format": "date-time"
              },
              "message": {
                "description": "A human readable message indicating details about the transition.\nThis field may be empty.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "observedGeneration": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "int64",
                "minimum": 0
              },
              "reason": {
                "description": "The reason for the condition's last transition in CamelCase.\nThe specific API may choose whether or not this field is considered a guaranteed API.\nThis field may not be empty.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "severity": {
                "description": "Severity provides an explicit classification of Reason code, so the users or machines can immediately\nunderstand the current situation and act accordingly.\nThe Severity field MUST be set only when Status=False.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "status": {
                "description": "Status of the condition, one of True, False, Unknown.",
                "type": "string"
              },
              "type": {
                "description": "Type of condition in CamelCase or in foo.example.com/CamelCase.\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions\ncan be useful (see .node.status.conditions), the ability to deconflict is important.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "platform": {
          "description": "Platform hols the specific statuses",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "kubeVirt": {
              "description": "KubeVirt contains the KubeVirt platform statuses",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "cacheName": {
                  "description": "CacheName holds the name of the cache DataVolume, if exists",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "credentials": {
                  "description": "Credentials shows the client credentials used when creating KubeVirt virtual machines.\nThis filed is only exists when the KubeVirt virtual machines are being placed\non a cluster separate from the one hosting the Hosted Control Plane components.\n\n\nThe default behavior when Credentials is not defined is for the KubeVirt VMs to be placed on\nthe same cluster and namespace as the Hosted Control Plane.",
                  "type": [
                    "object",
                    "null"
                  ],
                  "required": [
                    "infraNamespace"
                  ],
                  "properties": {
                    "infraKubeConfigSecret": {
                      "description": "InfraKubeConfigSecret is a reference to a secret that contains the kubeconfig for the external infra cluster\nthat will be used to host the KubeVirt virtual machines for this cluster.",
                      "type": [
                        "object",
                        "null"
                      ],
                      "required": [
                        "key",
                        "name"
                      ],
                      "properties": {
                        "key": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      },
                      "x-kubernetes-validations": [
                        {
                          "message": "infraKubeConfigSecret is immutable",
                          "rule": "self == oldSelf"
                        }
                      ],
                      "additionalProperties": false
                    },
                    "infraNamespace": {
                      "description": "InfraNamespace defines the namespace on the external infra cluster that is used to host the KubeVirt\nvirtual machines. This namespace must already exist before creating the HostedCluster and the kubeconfig\nreferenced in the InfraKubeConfigSecret must have access to manage the required resources within this\nnamespace.",
                      "type": "string",
                      "x-kubernetes-validations": [
                        {
                          "message": "infraNamespace is immutable",
                          "rule": "self == oldSelf"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        "replicas": {
          "description": "Replicas is the latest observed number of nodes in the pool.",
          "type": [
            "integer",
            "null"
          ],
          "format": "int32"
        },
        "version": {
          "description": "Version is the semantic version of the latest applied release specified by\nthe NodePool.",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "hypershift.openshift.io",
      "kind": "NodePool",
      "version": "v1beta1"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}