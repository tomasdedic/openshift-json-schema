{
  "description": "BackingStore is the Schema for the backingstores API",
  "type": "object",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "noobaa.io/v1alpha1"
      ]
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": [
        "string",
        "null"
      ],
      "enum": [
        "BackingStore"
      ]
    },
    "metadata": {
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
      "$ref": "_definitions.json#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
    },
    "spec": {
      "description": "Specification of the desired behavior of the noobaa BackingStore.",
      "type": [
        "object",
        "null"
      ],
      "required": [
        "type"
      ],
      "properties": {
        "awsS3": {
          "description": "AWSS3Spec specifies a backing store of type aws-s3",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "targetBucket"
          ],
          "properties": {
            "awsSTSRoleARN": {
              "description": "AWSSTSRoleARN allows to Assume Role and use AssumeRoleWithWebIdentity",
              "type": [
                "string",
                "null"
              ]
            },
            "region": {
              "description": "Region is the AWS region",
              "type": [
                "string",
                "null"
              ]
            },
            "secret": {
              "description": "Secret refers to a secret that provides the credentials\nThe secret should define AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "name": {
                  "description": "name is unique within a namespace to reference a secret resource.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "namespace": {
                  "description": "namespace defines the space within which the secret name must be unique.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "x-kubernetes-map-type": "atomic",
              "additionalProperties": false
            },
            "sslDisabled": {
              "description": "SSLDisabled allows to disable SSL and use plain http",
              "type": [
                "boolean",
                "null"
              ]
            },
            "targetBucket": {
              "description": "TargetBucket is the name of the target S3 bucket",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "azureBlob": {
          "description": "AzureBlob specifies a backing store of type azure-blob",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "secret",
            "targetBlobContainer"
          ],
          "properties": {
            "secret": {
              "description": "Secret refers to a secret that provides the credentials\nThe secret should define AccountName and AccountKey as provided by Azure Blob.",
              "type": "object",
              "properties": {
                "name": {
                  "description": "name is unique within a namespace to reference a secret resource.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "namespace": {
                  "description": "namespace defines the space within which the secret name must be unique.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "x-kubernetes-map-type": "atomic",
              "additionalProperties": false
            },
            "targetBlobContainer": {
              "description": "TargetBlobContainer is the name of the target Azure Blob container",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "googleCloudStorage": {
          "description": "GoogleCloudStorage specifies a backing store of type google-cloud-storage",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "secret",
            "targetBucket"
          ],
          "properties": {
            "secret": {
              "description": "Secret refers to a secret that provides the credentials\nThe secret should define GoogleServiceAccountPrivateKeyJson containing the entire json string as provided by Google.",
              "type": "object",
              "properties": {
                "name": {
                  "description": "name is unique within a namespace to reference a secret resource.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "namespace": {
                  "description": "namespace defines the space within which the secret name must be unique.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "x-kubernetes-map-type": "atomic",
              "additionalProperties": false
            },
            "targetBucket": {
              "description": "TargetBucket is the name of the target S3 bucket",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ibmCos": {
          "description": "IBMCos specifies a backing store of type ibm-cos",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "endpoint",
            "secret",
            "targetBucket"
          ],
          "properties": {
            "endpoint": {
              "description": "Endpoint is the IBM COS compatible endpoint: http(s)://host:port",
              "type": "string"
            },
            "secret": {
              "description": "Secret refers to a secret that provides the credentials\nThe secret should define IBM_COS_ACCESS_KEY_ID and IBM_COS_SECRET_ACCESS_KEY",
              "type": "object",
              "properties": {
                "name": {
                  "description": "name is unique within a namespace to reference a secret resource.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "namespace": {
                  "description": "namespace defines the space within which the secret name must be unique.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "x-kubernetes-map-type": "atomic",
              "additionalProperties": false
            },
            "signatureVersion": {
              "description": "SignatureVersion specifies the client signature version to use when signing requests.",
              "type": [
                "string",
                "null"
              ]
            },
            "targetBucket": {
              "description": "TargetBucket is the name of the target IBM COS bucket",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "pvPool": {
          "description": "PVPool specifies a backing store of type pv-pool",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "numVolumes"
          ],
          "properties": {
            "numVolumes": {
              "description": "NumVolumes is the number of volumes to allocate",
              "type": "integer"
            },
            "resources": {
              "description": "VolumeResources represents the minimum resources each volume should have.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "limits": {
                  "description": "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                },
                "requests": {
                  "description": "Requests describes the minimum amount of compute resources required.\nIf Requests is omitted for a container, it defaults to Limits if that is explicitly specified,\notherwise to an implementation-defined value. Requests cannot exceed Limits.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
                  "type": [
                    "object",
                    "null"
                  ],
                  "additionalProperties": {
                    "pattern": "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
                    "x-kubernetes-int-or-string": true
                  }
                }
              },
              "additionalProperties": false
            },
            "secret": {
              "description": "Secret refers to a secret that provides the agent configuration\nThe secret should define AGENT_CONFIG containing agent_configuration from noobaa-core.",
              "type": [
                "object",
                "null"
              ],
              "properties": {
                "name": {
                  "description": "name is unique within a namespace to reference a secret resource.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "namespace": {
                  "description": "namespace defines the space within which the secret name must be unique.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "x-kubernetes-map-type": "atomic",
              "additionalProperties": false
            },
            "storageClass": {
              "description": "StorageClass is the name of the storage class to use for the PV's",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "s3Compatible": {
          "description": "S3Compatible specifies a backing store of type s3-compatible",
          "type": [
            "object",
            "null"
          ],
          "required": [
            "endpoint",
            "secret",
            "targetBucket"
          ],
          "properties": {
            "endpoint": {
              "description": "Endpoint is the S3 compatible endpoint: http(s)://host:port",
              "type": "string"
            },
            "secret": {
              "description": "Secret refers to a secret that provides the credentials\nThe secret should define AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY",
              "type": "object",
              "properties": {
                "name": {
                  "description": "name is unique within a namespace to reference a secret resource.",
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "namespace": {
                  "description": "namespace defines the space within which the secret name must be unique.",
                  "type": [
                    "string",
                    "null"
                  ]
                }
              },
              "x-kubernetes-map-type": "atomic",
              "additionalProperties": false
            },
            "signatureVersion": {
              "description": "SignatureVersion specifies the client signature version to use when signing requests.",
              "type": [
                "string",
                "null"
              ]
            },
            "targetBucket": {
              "description": "TargetBucket is the name of the target S3 bucket",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "type": {
          "description": "Type is an enum of supported types",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "status": {
      "description": "Most recently observed status of the noobaa BackingStore.",
      "type": [
        "object",
        "null"
      ],
      "properties": {
        "conditions": {
          "description": "Conditions is a list of conditions related to operator reconciliation",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "Condition represents the state of the operator's\nreconciliation functionality.",
            "type": [
              "object",
              "null"
            ],
            "required": [
              "status",
              "type"
            ],
            "properties": {
              "lastHeartbeatTime": {
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "lastTransitionTime": {
                "type": [
                  "string",
                  "null"
                ],
                "format": "date-time"
              },
              "message": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "reason": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "status": {
                "type": "string"
              },
              "type": {
                "description": "ConditionType is the state of the operator's reconciliation functionality.",
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "mode": {
          "description": "Mode specifies the updating mode of a BackingStore",
          "type": [
            "object",
            "null"
          ],
          "properties": {
            "modeCode": {
              "description": "ModeCode specifies the updated mode of backingstore",
              "type": [
                "string",
                "null"
              ]
            },
            "timeStamp": {
              "description": "TimeStamp specifies the update time of backingstore new mode",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "phase": {
          "description": "Phase is a simple, high-level summary of where the backing store is in its lifecycle",
          "type": [
            "string",
            "null"
          ]
        },
        "relatedObjects": {
          "description": "RelatedObjects is a list of objects related to this operator.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "description": "ObjectReference contains enough information to let you inspect or modify the referred object.\n---\nNew uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.\n 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.\n 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular\n    restrictions like, \"must refer only to types A and B\" or \"UID not honored\" or \"name must be restricted\".\n    Those cannot be well described when embedded.\n 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.\n 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity\n    during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple\n    and the version of the actual struct is irrelevant.\n 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type\n    will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.\n\n\nInstead of using this type, create a locally provided and used type that is well-focused on your reference.\nFor example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .",
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "apiVersion": {
                "description": "API version of the referent.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "fieldPath": {
                "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.\nTODO: this design is not final and this field is subject to change in the future.",
                "type": [
                  "string",
                  "null"
                ]
              },
              "kind": {
                "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                "type": [
                  "string",
                  "null"
                ]
              },
              "name": {
                "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                "type": [
                  "string",
                  "null"
                ]
              },
              "namespace": {
                "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                "type": [
                  "string",
                  "null"
                ]
              },
              "resourceVersion": {
                "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                "type": [
                  "string",
                  "null"
                ]
              },
              "uid": {
                "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "x-kubernetes-map-type": "atomic",
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    }
  },
  "x-kubernetes-group-version-kind": [
    {
      "group": "noobaa.io",
      "kind": "BackingStore",
      "version": "v1alpha1"
    }
  ],
  "additionalProperties": false,
  "$schema": "http://json-schema.org/schema#"
}